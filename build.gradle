plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "5.0.0.4638"
	id 'jacoco'
}

group = 'com.personal'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'


	implementation group: 'org.postgresql', name: 'r2dbc-postgresql', version: '1.0.4.RELEASE'

	implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.2.0-M1'

	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.30'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testImplementation 'io.projectreactor:reactor-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

sonar {
	scanner {
		sonarQubeUrl = "https://sonarcloud.io"
		organization = "haricorp"
		projectKey = "reactive-spring-with-sonar"
		token = project.properties['SONAR_TOKEN'] // Assuming you have a sonarcloud.token property set
	}

	properties {
		property "sonar.projectKey", "reactive-spring-with-sonar"
		property "sonar.organization", "haricorp"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.sources", "src/main"
		property "sonar.tests", "src/test"
	}
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}
